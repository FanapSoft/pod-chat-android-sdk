apply plugin: 'maven-publish'

def LIB_GROUP_ID = 'com.github.FanapSoft'
def LIB_ARTIFACT_ID = 'podchat'
def MAIN_VERSION = libraryVersion
def LIGHT_VERSION = libraryVersionLight

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

tasks.register('printPublishFilesPath') {

    group 'PodChatPublish'

    doLast {

        println("Artifacts are ready for publish ${projectDir}/publishArtifacts/")

        fileTree("${projectDir}/publishArtifacts/").visit {
            println it.file.path
        }
    }
}

tasks.register('preparePublishingFiles', Copy) {

    group 'PodChatPublish'

    println("moving publish files...")
    from "$buildDir/outputs/aar"
    include "*-publish-*"
    into "/publishArtifacts"

    rename "(.+)-v$libraryVersion(.+)", '$1$2'
    rename '(.+)-publish(.+)', '$1$2'
    rename '(.+)-withCall(.+)', '$1$2'

}

tasks.register('preparePublishing') {

    group 'PodChatPublish'

    dependsOn tasks.clean
    dependsOn tasks.assemblePublish
    dependsOn 'preparePublishingFiles'
    dependsOn 'printPublishFilesPath'

    tasks.assemblePublish.mustRunAfter 'clean'
    tasks.preparePublishingFiles.mustRunAfter 'assemblePublish'
    tasks.printPublishFilesPath.mustRunAfter 'preparePublishingFiles'

}

tasks.register('publishToLocalMaven'){

    group 'PodChatPublish'

    dependsOn tasks.preparePublishing
    dependsOn tasks.publishWithoutCallPublicationToMavenLocal
    dependsOn tasks.publishWithCallPublicationToMavenLocal

    tasks.publishWithCallPublicationToMavenLocal.mustRunAfter 'preparePublishing'
    tasks.publishWithoutCallPublicationToMavenLocal.mustRunAfter 'publishWithCallPublicationToMavenLocal'


}

tasks.register('publishToPodchatSnapshots'){

    group 'PodChatPublish'

    dependsOn tasks.preparePublishing
    dependsOn tasks.publishWithoutCallPublicationToPodchatSnapshotsRepository
    dependsOn tasks.publishWithCallPublicationToPodchatSnapshotsRepository

    tasks.publishWithoutCallPublicationToPodchatSnapshotsRepository.mustRunAfter 'preparePublishing'
    tasks.publishWithCallPublicationToPodchatSnapshotsRepository.mustRunAfter 'publishWithoutCallPublicationToPodchatSnapshotsRepository'


}

tasks.register('publishToGithub'){

    group 'PodChatPublish'

    dependsOn tasks.preparePublishing
    dependsOn tasks.publishWithoutCallPublicationToGithubPackagesRepository
    dependsOn tasks.publishWithCallPublicationToGithubPackagesRepository

    tasks.publishWithoutCallPublicationToGithubPackagesRepository.mustRunAfter 'preparePublishing'
    tasks.publishWithCallPublicationToGithubPackagesRepository.mustRunAfter 'publishWithoutCallPublicationToGithubPackagesRepository'


}
tasks.register('publishLightVersionToGithub'){

    group 'PodChatPublish'

    dependsOn tasks.preparePublishing
    dependsOn tasks.publishWithoutCallPublicationToGithubPackagesRepository

    tasks.publishWithoutCallPublicationToGithubPackagesRepository.mustRunAfter 'preparePublishing'


}
tasks.register('publishMainVersionToGithub'){

    group 'PodChatPublish'

    dependsOn tasks.preparePublishing
    dependsOn tasks.publishWithCallPublicationToGithubPackagesRepository

    tasks.publishWithCallPublicationToGithubPackagesRepository.mustRunAfter 'preparePublishing'


}



publishing {
    repositories {
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/FanapSoft/pod-chat-android-sdk")
            credentials {
                Properties properties = new Properties()
                properties.load(project.rootProject.file('local.properties').newDataInputStream())
                username = properties.getProperty('GITHUB_USER')
                password = properties.getProperty('GITHUB_PERSONAL_ACCESS_TOKEN')
            }
        }
        maven {
            name = 'PodchatSnapshots'
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            url = properties.getProperty('snapshotRepo')
        }
    }
    publications {

        withCall(MavenPublication){
            groupId LIB_GROUP_ID
            artifactId LIB_ARTIFACT_ID
            version MAIN_VERSION
            artifact("/publishArtifacts/podchat.aar")

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
        withoutCall(MavenPublication) {
            groupId LIB_GROUP_ID
            artifactId LIB_ARTIFACT_ID
            version "$LIGHT_VERSION-light"
            artifact("/publishArtifacts/podchat-withoutCall.aar")

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }


    }
}