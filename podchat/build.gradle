apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.kezong.fat-aar'
apply plugin: 'com.google.gms.google-services'

ext {

    libraryVersion = '0.9.5.0'
}

android {

    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 29
        versionCode 150
        versionName libraryVersion

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            ndkBuild {
                // We don't build for arm64-v8a for now, because ASM optimizations do not compile
                // (at least for the default floating point implementation) and ARM64 supports
                // also armeabi-v7a binaries natively, so let's use those, which should be more
                // efficient.
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFile 'proguard-rules.pro'
        }
        debug {
            consumerProguardFile 'proguard-rules.pro'
        }
        podChatPublishing {
            consumerProguardFile 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildToolsVersion '28.0.3'
    externalNativeBuild {
        ndkBuild {
            path file('src/main/jni/Android.mk')
        }
    }
}

ext {
    bintrayRepo = "maven"
    bintrayName = "chat"

    libraryName = 'Fanap PodChat Android SDK'

    publishedGroupId = 'com.fanap.chat'
    artifact = 'podchat'

    libraryDescription = 'Fanaps POD Chat service (DIRANA)'
    gitUrl = 'https://github.com/Farhad7d7/Pod-Chat-Android-SDK.git'
    siteUrl = 'https://github.com/Farhad7d7/Pod-Chat-Android-SDK'
    developerId = 'farhad7d7'
    developerName = 'Farhad Kheirkhah'
    developerEmail = 'farhadkheirkhah7@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

//configurations.embed.transitive = true


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation fileTree(include: ['*.aar'], dir: 'libs')
    implementation 'com.android.support:support-annotations:28.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.1.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    //okHttp
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    //Rx
    implementation 'io.reactivex:rxjava:1.1.6'
    implementation 'io.reactivex:rxandroid:1.2.1'

    //room
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'

    //rx for room
//    implementation "android.arch.persistence.room:rxjava2:1.1.1"

    implementation 'com.commonsware.cwac:saferoom:1.2.1'


    implementation 'com.google.dagger:dagger:2.16'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.16'

    implementation 'com.scottyab:secure-preferences-lib:0.1.7'
//    api project(path: ':podasync')
    api 'com.fanap.async:podasync:0.2.13.8'

    //using for notification layout
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'


    //Sentry, Store logs
    implementation 'io.sentry:sentry-android:2.0.0'
//    implementation 'org.slf4j:slf4j-nop:1.7.25'
    //notification
    implementation 'com.google.firebase:firebase-analytics:16.0.0'
    implementation 'com.google.firebase:firebase-messaging:18.0.0'

    implementation 'com.github.bumptech.glide:glide:4.7.1'

    annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'

    List<String> runTasks = gradle.startParameter.getTaskNames();

    for (String item : runTasks) {
        println(item)
        if (item.contains("assembleDebug")) {
            implementation project(path: ':kafkaclient')
        } else {
            embed project(path: ':kafkaclient')
        }
    }

}

group = publishedGroupId

version = libraryVersion
//
//configurations.maybeCreate("default")
//artifacts.add("default", file('kafkaclient.aar'))


install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId publishedGroupId
            artifactId artifact

            name libraryName
            description libraryDescription
            url siteUrl

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }

            println("end of setting")

        }
        pom.whenConfigured { pom ->
            println("######### when config $pom")

        }
    }
}


afterEvaluate { project ->
    println(">>>after eval $project")

    uploadArchives {
        println(">>>upload archives")

        repositories {
            println(">>>repo")

            mavenDeployer {

                repository(url: "file://${buildDir}/outputs/maven")


                println(">>>maven deployer")


                pom.groupId = group
                pom.artifactId = artifact
                pom.version = libraryVersion
                pom.project {

                    println(">>>pom project")

                    packaging 'aar'
                    groupId publishedGroupId
                    artifactId artifact

                    name libraryName
                    description libraryDescription
                    url siteUrl

                    licenses {
                        license {
                            name licenseName
                            url licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id developerId
                            name developerName
                            email developerEmail
                        }
                    }
                    scm {
                        connection gitUrl
                        developerConnection gitUrl
                        url siteUrl
                    }
                }

                println(">>>>end of pom")


                pom.whenConfigured { pom ->
                    println(">>>>when configuered")
                }
            }
        }
    }


    task publishIt {

        doFirst {
            println 'start publishing'
        }
        doLast {
            println 'Published successfully!'
        }
        dependsOn 'clean'
        dependsOn 'install'
        dependsOn 'bintrayUpload'
        tasks.findByName('install').mustRunAfter('clean')
        tasks.findByName('bintrayUpload').mustRunAfter('install')


    }


    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")

        configurations = ['archives']
        pkg {
            repo = bintrayRepo
            name = bintrayName
            desc = libraryDescription
            websiteUrl = siteUrl
            vcsUrl = gitUrl
            licenses = allLicenses
            dryRun = false
            publish = true
            override = true
            publicDownloadNumbers = true
            version {
                desc = libraryDescription
            }
        }
    }
}
